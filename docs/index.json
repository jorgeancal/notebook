[{
    "title": "How to config SOPS in Helm",
    "date": "",
    "description": "I will explain how to use SOPS in helm deploying it with helmfile",
    "body": "In our previous post about helmfile, we spoke briefly about sops, but we didn\u0026rsquo;t use it or speak more about it\u0026hellip; Now it\u0026rsquo;s the time to do that. With SOPS, we can have a file in our repo that is encrypted by sops and have the variables to use in our chart through Helmfile there.\nWhat is Sops? If we take a look at the Project, we\u0026rsquo;ll see that Mozilla defines SOPS as \u0026ldquo;an editor of encrypted files that supports YAML, JSON, ENV, INI and BINARY formats and encrypts with AWS KMS, GCP KMS, Azure Key Vault and PGP\u0026rdquo;.\nHow to implement it? As everyone knows, this life is based in plugins so\u0026hellip; We need to install a plugin in helm to be able to use sops. I did some research that was\u0026hellip; keep reading the helmfile Readme.md. In that readme, you can find a link to the plugin helm-secrets that lives in zendesk/helm-secrets but this is obsolete, but thanks to the community we have a fork of it that is not obsolete and this is the repo. Firstly, we have to install the plugin dependencies, the helm plugin and that\u0026rsquo;s it. If I remember correctly, if you have Ubuntu or Debian, when you install the plugin the dependency will be installed at the same time but.. As I\u0026rsquo;m using ArchLinux I need to install it manually. I have to say that they recommend the manual installation. Here you have a link to the releases.\nOnce you have installed the package you need to install the helm plugin, they recommend that you install it with the version flag --version. You would need to run the following command being ${HELM_SECRERS_VERSION} the version that you want to install.\nhelm plugin install https://github.com/jkroepke/helm-secrets --version ${HELM_SECRERS_VERSION} After you have installed the plugin, you need to go to your helmfile root folder and add a hidden file called .sops.yaml. This file should look like the following one:\ncreation_rules: # Encrypt with AWS KMS - kms: \u0026#39;arn:aws:kms:eu-west-1:222222222222:key/111b1c11-1c11-1fd1-aa11-a1c1a1sa1dsl1\u0026#39; # Encrypt using GCP KMS - gcp_kms: projects/mygcproject/locations/global/keyRings/mykeyring/cryptoKeys/thekey # As failover encrypt with PGP - pgp: \u0026#39;000111122223333444AAAADDDDFFFFGGGG000999\u0026#39; # For more help look at https://github.com/mozilla/sops BTW Multiple KMS and PGP are allowed.\nOnce you have this file created, you need to go to releases and add the field secrets that allows to helmfile to get the file. Your release should look something like this:\n- \u0026lt;\u0026lt;: *defaultTmpl name: \u0026#34;grafana\u0026#34; chart: \u0026#34;grafana/grafana\u0026#34; namespace: \u0026#34;monitoring\u0026#34; version: \u0026#34;3.2.5\u0026#34; installed: {{ .Values | getOrNil \u0026#34;grafana.installed\u0026#34; | default false }} needs: - observability/fluentd - observability/prometheus - operators/jaeger-operator secrets: - releases/grafana/secrets.yaml How to edit the secrets.yaml with SOPS? There are a few ways to edit the files, but I would recommend that you create an ENV var and go to the directory where the file is and run sops secrets.yaml .\nFor example, I\u0026rsquo;m using SOPS with AWS KMS, and it looks like the following:\nexport SOPS_KMS_ARN=arn:aws:kms:eu-west-1:222222222222:key/111b1c11-1c11-1fd1-aa11-a1c1a1sa1dsl1 That was everything! I hope you like this post, and I\u0026rsquo;ll see you in the next one.\n",
    "ref": "/blog/how-to-implement-sops-helmfile/"
  },{
    "title": "How to set up your kluster with helmfile",
    "date": "",
    "description": "We'll config helmfile. This is not the perfect solution, but this is my way, and it works for me.",
    "body": "Helmfile is a tool that allows you to get more out of Helm. When you use helmfile, you can implement as many charts as you want. Helmfile allows you to template the charts with the values that you want, and it will ship it to your cluster. Helmfile brings modular deployments too, by this I mean that you can have a huge list of deployments, and you can say deploy only this group of helmchart, you can also deploy them in sequence.\nWhat do I like about helmfile? After six months using helmfile, this is what I liked the most about helmfile:\nIt\u0026rsquo;s stupidly faster because you have all the releases in the same file, and you ship them to the cluster in the order that you want.\nCentralized Values. I love the possibility of having a main config per environment and then be able to apply those different values to the charts.\ndiff. This command in helmfile lets me compare with the current chart that I have in the cluster. I know that when you exec the diff you have thousands of lines, but sometimes it\u0026rsquo;s useful because it shows what you changed, or if you just blew it up.\nEnv Variables. This is a lovely alternative to get everything working without having passwords in plain text in a file. An alternative to this is helm-secrets, but I didn\u0026rsquo;t use it, so I cannot tell you how good it is. I have to say that it is an awesome idea that you can use sops to encode the variables value. I\u0026rsquo;m starting to look into it, but I haven\u0026rsquo;t implemented it yet.\nHow to set up Helmfile? Firstly, we need to set up a folder schema. You can have it in a folder with other stuff, but I prefer to have it in the root of the repo. It\u0026rsquo;s going to be better if I show you the schema.\n. ├── addReleases.sh ├── base │ ├── defaults │ │ └── helmfile.yaml | ├── environments │ │ └── helmfile.yaml │ ├── repositories │ │ └── helmfile.yaml │ ├── templates │ │ └── template.yaml │ └── values │ ├── minikube │ │ └── values.yaml.gotmpl │ └── production │ └── values.yaml.gotmpl ├── helmfile.yaml ├── README.md └── releases ├── prometheus │ ├── helmfile.yaml │ ├── README.md │ └── values.yaml.gotmpl └── grafana ├── helmfile.yaml ├── README.md └── values.yaml.gotmpl Now I\u0026rsquo;m going to show you what I have in the main helmfile file.\n{{ readFile \u0026#34;base/templates/helmfile.yaml\u0026#34; }} {{ readFile \u0026#34;base/repositories/helmfile.yaml\u0026#34; }} releases: As you can see above, we have two readFile commands and a release field with no releases. Let\u0026rsquo;s go to follow the file line by line. The first line is going to be the template that I\u0026rsquo;ve created with some patterns that will be the same for all the releases, and I don\u0026rsquo;t want to write the same line ten times\u0026hellip; After that, we have the readfile for the repositories. Yep, we have all the repositories from all the files in there\u0026hellip; yeah, it sounds crazy, but it gives you a bit more speed.\nNow let\u0026rsquo;s see the template file\nbases: - base/defaults/helmfile.yaml - base/environments/helmfile.yaml templates: defaultTmpl: \u0026amp;defaultTmpl missingFileHandler: Warn valuesTemplate: - base/values/{{ .Environment.Name }}/values.yaml.gotmpl - releases/{{ .Release.Name }}/values.yaml.gotmpl As you can see, we have a bit more than a simple template here. We have the bases in here too. I have two bases. The first base is the default config, you can see all the options in their readme. The second base is the environments where I declare values for them. These variables are going to allow me to declare which releases I want to release into the cluster. I have to say that I would probably move them to the main hemlfile or change the name of the file at some point. I like the bases in the file at the moment because it kind of feels like the template is part of the base of helmfile.\nIt\u0026rsquo;s time to see how I release everything\u0026hellip; In the next file, you\u0026rsquo;ll see an example of my grafana release. In the first line, we\u0026rsquo;ll have the template that we are implementing. After that, we would have the name, chart, namespace and version as we have on any kind of release in Helm. After all these fields, we have the one that allows me to tell it if I want it to be installed or not. After that one, I have the dependencies of that chart. That means that helmfile is not going to release it until the others have been released.\n- \u0026lt;\u0026lt;: *defaultTmpl name: \u0026#34;grafana\u0026#34; chart: \u0026#34;grafana/grafana\u0026#34; namespace: \u0026#34;monitoring\u0026#34; version: \u0026#34;3.2.5\u0026#34; installed: {{ .Values | getOrNil \u0026#34;grafana.installed\u0026#34; | default false }} needs: - observability/fluentd - observability/prometheus - operators/jaeger-operator How to use it This is the simplest thing that you\u0026rsquo;re going to see in this post\u0026hellip; you need to go to your main helmfile and run the following command:\nhelmfile -e minikube apply Before you run that command, you are going to need to run a bash script. This bash script is going to template the small helmfile releases to the main helmfile.\n#!/bin/bash for release in `find releases/ -name \u0026#34;*.yaml\u0026#34;`; do release_name=$(cat $release | grep \u0026#34;name: \u0026#34; | cut -d\u0026#39; \u0026#39; -f2-) echo \u0026#34;Templating $release\u0026#34; cat $release | sed \u0026#39;s/\\(.*\\)/ \\1/\u0026#39; \u0026gt;\u0026gt; helmfile.yaml echo \u0026gt;\u0026gt; helmfile.yaml done After running this script, your helmfile.yaml should look something like this:\n{{ readFile \u0026#34;base/templates/helmfile.yaml\u0026#34; }} {{ readFile \u0026#34;base/repositories/helmfile.yaml\u0026#34; }} releases: - \u0026lt;\u0026lt;: *defaultTmpl name: \u0026#34;grafana\u0026#34; chart: \u0026#34;grafana/grafana\u0026#34; namespace: \u0026#34;monitoring\u0026#34; version: \u0026#34;3.2.5\u0026#34; installed: {{ .Values | getOrNil \u0026#34;grafana.installed\u0026#34; | default false }} needs: - observability/fluentd - observability/prometheus - operators/jaeger-operator - operators/istio-operator I have to say that this is not the perfect way to use helmfile, but this is how I use it, and it works for me. You can see all the files in this repo. Thanks for reading me, everyone! I hope you like this post, and I\u0026rsquo;ll see you in the next one.\n",
    "ref": "/blog/how-to-set-up-your-kluster-with-helmfle/"
  },{
    "title": "jlink with Spring Boot services",
    "date": "",
    "description": "Here, you will learn about how to create a small JRE for your microservices. ",
    "body": "This always has been my priority because\u0026hellip; I don\u0026rsquo;t want to pay extra in ECR so\u0026hellip; I have to create small docker images.\nwe need to list the classpath of all the libraries that we are going to use the follow command in maven ot save all of them in a file\nmvn dependency:build-classpath -Dmdep.includeScope=runtime -Dmdep.outputFile=classpath once we have all the libraries in a file\u0026hellip; we need are going to put everything in a environment variable that way we can use it later on. To be able to do that\u0026hellip; we need to run the following command\nexport SERVICE_CLASSPATH=$(cat classpath) Once we have the variable in place let\u0026rsquo;s go to list all the java modules. For that we are going to run the following command:\njdeps -cp $SERVICE_CLASSPATH --multi-release $JDK --print-module-deps --ignore-missing-deps -R target/classes Being $JDK the number of java version. Once we have all the modules it\u0026rsquo;s time to create out slim jdk\u0026hellip; for that we are going to need to run the following command (Being $JDEPMODULES the list of modules from the previous command)\n$ jlink --module-path /opt/java/jmods --compress=2 --strip-debug \\ --no-header-files --no-man-pages \\ --add-modules $JDEPMODULES --output /opt/jlink Now, we have our runtime in /opt/jlink folder that we can use to run our application and this folder is going to be around 30 Mb instead of 240 Mb which is the normal size of the JDK.\nNowadays we need to create automated tasks to make everything easier. These steps are really easy to set in a Dockerfile. If you do this you could create an image that is smaller than 100 Mb, maybe a bit more if you have a lot of dependencies. It may look difficult but it\u0026rsquo;s not. I\u0026rsquo;ll try to create another post showing how to do this in an automated way with the dockerfile. I hope you like this post so far and I\u0026rsquo;ll see you in the next one.\n",
    "ref": "/blog/how-to-create-a-small-jvm-docker-image/"
  },{
    "title": "Starting with Spring Boot",
    "date": "",
    "description": "In this post we’re going to have different sections, in the first one, as in all beginner courses, we’re going to define Spring, learn how to create a project with Spring Boot and learn what the meaning of the basic class which Spring gives you when you start a project is.",
    "body": "In this post we’re going to have different sections, in the first one, as in all beginner courses, we’re going to define Spring, learn how to create a project with Spring Boot and learn what the meaning of the basic class which Spring gives you when you start a project is.\nWhat’s Spring? If you stop someone on the street and ask them about it, they are going to tell you that Spring is a season of the year, but that’s not the meaning that we want. Spring in IT is an open source framework for Java Platforms which was created by Roderick “Rod” Johnson. This framework is lightweight because it has a modular philosophy, I mean if you have a base and you add the different modules when you need them or when the application is getting bigger. This framework is really popular because of it’s simplicity, loose coupling and testability.\nInside this framework we can find Spring Boot. If we go to the website and we read the summary of Spring Boot which is ‘Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”‘. It think it’s a really good explication.\nHow to create a project Well this is the easier thing which you are going to learn about Spring. I don’t know which IDE you’re using but I use IntelliJ IDEA or Eclipse with the Spring Tools and both of them has the initialiser option, but if you’re using another one you can go to the initialiser of Spring WebSite. If you have the initialiser in your IDE just go to “Create a New Project”.\nIntelliJ IDEA After creating a new project, you have to select the “Spring Initializr” option and click “next”, after that you need to fill in the form data and click “next” again. Now you’ll have a list with all the different Spring modules which you can add to your project, here I have to add that I usually use the Lombok dependency because with it I can get shorter classes, I’ll do another post talking about that. After selecting all the modules which we need, click on “next”. Now give it a name and click “Finish”. That’s all, it’s easy isn’t it? I uploaded a few pictures of the whole process here.\nSTS It’s really similar to IntelliJ. I’ll give you a few pictures showing you how to do it. The difference is in the second one, you can choose more things and give it a name in the same step which is more useful than IntelliJ, I think.\nWhat Do We Have In The Project? When you open the project you have three files as you can see in the next image:\nThe file “PruebaApplciation” is the main class, without it you don’t have a Spring Boot project unless you create one with the same content and a different name. If you open the file you’re going to see something like this: If you look at this, it’s like a normal class when you start studying Java, the only difference is the annotation @SpringBootApplication. This annotation is the equivalent of three which are:\n@EnableAutoConfiguration enables Spring Boot’s auto-configuration mechanism @ComponentScan enables @Component scan on the package where the application is located (see the best practices) @Configuration allows to register extra beans in the context or import additional configuration classes I mean you can use just the annotation which Spring Boot gives you or just change it for these three ones.\nThe file “application.properties” is the configuration file. I mean, in this document you can set the data which you need for the Data Base Connection and a lot more things. As you can see, it’s totally empty. The file “PruebaApplicationTests” is the test file. It’s something that you have and you must use it. A lot of people tell you we want an expert in tests, and later you’re not going to use it, but you must know what you have to do with it. I use it in my applications but I have been in five projects and I have only used tests in one. We only used them in the beginning because after a few months, the tests were there but no-one updated them, so all of them were obsolete. If you want to do a good application, please use this file, you’re going to love it when you have to check the tickets or issues of the WebService. And with all of that, I think we’re done here.\n",
    "ref": "/blog/starting-with-spring-boot/"
  },{
    "title": "What’s going on with Java?",
    "date": "",
    "description": "Another version of java? See what it's going on with java and what they have to say about it.",
    "body": "The other day there were a few news articles about the new version of Java. I was thinking another one? Really? Like a lot of people in the beginning of their careers, no-one checks the differences between Java versions because they are focused on the projects which they are working on, or maybe it’s just me. But, I had a break between jobs so I decided to update all my knowledge and one thing from my list was this one, so I hope you find this information interesting. As everyone knows, Java has another JDK version which is the JDK 11.\nOne year ago, Oracle released JDK 9 which a lot of people said was really bad, Oracle released JDK 11 after JDK 10, that’s pretty obvious. But I learned to develop with JDK 7 which was released in July 2011 while I was studying vocational training. Three years later, I started university and I had to use the JDK 8 which a lot of people said was something gorgeous. If I have to tell you whether I realised about the differences between them, I didn’t. Furthermore, I didn’t mind, but now I’ve started to do some research about which would be better for all the applications which I want to do, so now I mind. I’m going to tell you what’s going to happen with Java in the next few years and which one I chose for my apps.\nThe Future It’s madness, but we’re developers so it’s something which you find out when you start to work in this crazy world. The future of Java is open source, but it depends on you or the business which you’re working for because if you want to use it… get your wallet out. I think for a business it wouldn’t be a problem, but for a person like me who cares about each penny that I spend, it’s a problem because I hadn’t planned to spend money on this. The good thing is, if you don’t want to pay, you can use OpenJDK, check the price of JDK, maybe it’s worth it for you:\nProducts/Metrics N up License CPU Support Java SE Advanced Desktop $40 $8.80 - - Java SE Advanced $100 $22 5000 $ 1100 Java SE Suite $300 $66 15000 $3300 Maybe you can say “well it’s not expensive” and I think it’s not really expensive if you have a successful application and you earn a ton of money with it. But, as I don’t know if my applications are going to be successful, I prefer to save some money because I don’t know when I’m going to need it. I guess in a business you’re not going to have any problem buying the license. I don’t know how it is in the rest in the world but, in Spain, clients don’t want to spend a bit more money on developing their applications, for that reason we cannot spend a lot of money on extra libraries, plugins or raise your salaries or that’s what our bosses tell us when we ask them for it.\nAbout Versions When I read about this new version and that I would have to pay if I want to use JDK for my applications, I just started to laugh. After laughing a lot, I saw a Java version timeline. I hope no-one tells me you have to pay for this image too.\nAs you can see in the image, there’s a good thing, which is OpenJDK which is public and free for life. If you have an application and you’re using JDK which is not OpenJDK, sorry but you’re falling down into a bottomless pit because you need to upgrade it urgently. If I were you, I would use OpenJDK, but I love to use Open Source.\nNow I’m going to give you some information about the JDK 11 LTS, furthermore I’m going to give you some information about openJDK too.\nJDK 11 LTS Well, it’s not a really good thing when you see LTS on a development kit and you don’t want to see it near Java. I cannot understand what exactly Oracle is thinking, but I think it’s not going a good way. When you see the versions picture and you see the updates and everything which they want to do, the first thing you think is… this is weird. They spent three years releasing one version and now every few months you’re going to have a ton of updates and versions. I’m a bit worried about that because I saw three versions of Java in one year, two of which no-one is using, and even Oracle said forget them are not good versions.\nI hope everything will go well. At the moment, Oracle tell us about a few of the bugs which have been fixed in JDK 11 and they are:\n181: Nest-Based Access Control 309309: Dynamic Class-File Constants 315: Improve Aarch64 Intrinsics 318: Epsilon: A No-Op Garbage Collector 320: Remove the Java EE and CORBA Modules 321: HTTP Client (Standard) 323: Local-Variable Syntax for Lambda Parameters 324: Key Agreement with Curve25519 and Curve448 327: Unicode 10 328: Flight Recorder 329: ChaCha20 and Poly1305 Cryptographic Algorithms 330: Launch Single-File Source-Code Programs 331: Low-Overhead Heap Profiling 332: Transport Layer Security (TLS) 1.3 333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental) 335: Deprecate the Nashorn JavaScript Engine 336: Deprecate the Pack200 Tools and API If you want to know more about it without reading a lot, you can go to YouTube, Java has its own channel here.\nOpenJDK You should use it, it’s the one I’m going to use. Why? Because I’m using Linux and I don’t want to use something which isn’t free. Free things are always the best and even more so if it’s free food. I have been reading a lot about it and it looks like I’m not going to have any problem when I change everything, but this is in theory. I’ll let you know if I have any problems with them, but I don’t think I’m going to have a problem.\nIf you want to install it, you have to go to the official website, or this one. AdoptOpenJDK provides prebuilt OpenJDK binaries from a fully open source set of build scripts and infrastructure.\nIn conclusion, if you don’t want to pay, use OpenJDK.\n",
    "ref": "/blog/what-is-going-on-with-java/"
  },{
    "title": "How to Install Gitlab on Debian 9",
    "date": "",
    "description": "Let’s go with another installation. I’m not really sure about installing GitLab on my server, but I have been thinking a lot about it. I had installed Git which I like, but I tried one years ago and I like it but I haven’t installed it on my server.",
    "body": "Let’s go with another installation. I’m not really sure about installing GitLab on my server, but I have been thinking a lot about it. I had installed Git which I like, but I tried one years ago and I like it but I haven’t installed it on my server.\nGitLab is a really good tool. You can have it installed on your server and you can create different teams and just developers. I really like the teams thing because you can create the teams and you can create a project for the teams and you can create roles for each person of the team. I think is excellent. Installation\nFirstly, we need you to install the dependencies.\n# apt install -y curl openssh-server ca-certificates There are a lot of people who install the postfix because they want email notifications. So if you want to use another solution to send emails please skip this step and configure an external SMTP server after GitLab has been installed.\n# apt install -y postfix After installing all of it, you must add the respositories of GitLab. For that, you need to run the next command:\n# curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | bash Now you need to install it so… there are two different installations the Community Edition or Enterprise Edition. With the Enterprise Edition you have a trial of 30 days and then you have to pay for each user, but you can use mysql with it and there are more functionabilities. The free one is the community, which is the one I have. If you check the installation process on GitLab they are going to tell you to set an External URL as constant, if you want I have one similar to ‘http://myFox.jorgeancal.com’. But if you have in your local, you don’t need it but I drop the command here too.\n# EXTERNAL_URL=\u0026#34;http://gitlab.example.com\u0026#34; # apt install gitlab-ce Let’s go now with a simple comfiguration which is setting the admin password and login. I’ll do another post speaking more about how to configure and everything. I’m going to do like a quick introducction about commands and setting the root password. Well, the first thing you have to know is the command of how to generate the configuration again.\n# gitlab-ctl reconfigure Another interesting command is the one which allows you to run and stop the GitLab.\n# gitlab-ctl start # gitlab-ctl stop Now we’re going to set the password. Open in your browser the URL which you have, or if you didn’t set a URL, just write your IP in the browser.\nAfter that, you’ll have the log in screen. The admin user is “root” and the password is the password which you set up before. When you log in you’ll see something like this, and you can start with your projects! Enjoy! ",
    "ref": "/blog/how-to-install-gitlab-on-debian-9/"
  },{
    "title": "How to Install Jenkins",
    "date": "",
    "description": "In this post I’m going to try to explain what Jenkins is, why we use it, how to install it in Debain and how to use it. Everyone is going to say… oh no! Another boring post about it. I’ll tell them just maybe or maybe not. Find out for yourself.",
    "body": "In this post I’m going to try to explain what Jenkins is, why we use it, how to install it in Debain and how to use it. Everyone is going to say… oh no! Another boring post about it. I’ll tell them just maybe or maybe not. Find out for yourself.\nFirstly, I have to say this post is all my notes about my research about Jenkins, therefore, it could be a bit different than other websites, or just wrong! So if you see something wrong, just tell me about it. What’s Jenkins?\nFor me, Jenkins is a web application which offers an easy way to do a continuous integration or continuous delivery in different technologies.\nI think most people who search about these terms knows about Jenkins, but I’m going to explain it too in a few words. Continuous Integration, CI, is the process of automating the building and testing of the code every time the team upload the code to the control repository. Continuous Delivery, CD, is the process which builds, tests, configures and deploys from a test to a production environment.\nI think explaining these terms you can see why we use it. I’m really interested in working with it, because I think you can have more control in the product which we are developing. Because I’m using it now in my work, but I think we’re not using it correctly, but that is another matter. Installing Jenkins on Debian 9\nThere are a few ways to install it (Docker, War and apt). For these things I’m a bit weird, and I prefer to install it via apt. Well the first thing I have to say is log in with root user and add the key of the package repository:\nwget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | apt-key add - Now we have to add the package repository in the source list, there are two ways, so choose whichever you want. I’m going to use the first one.\nsh -c \u0026#39;echo deb http://pkg.jenkins.io/debian-stable binary/ \u0026gt; /etc/apt/sources.list.d/jenkins.list\u0026#39; For the second one, we need to create and add the next line in “/etc/apt/sources.list.d/jenkins.list” :\ndeb https://pkg.jenkins.io/debian binary/ Now it’s time to update the apt, so you need to execute the next command and install the package.\napt-get update \u0026amp;\u0026amp; apt-get install jenkins There you have it. Enjoy your Jenkins. But don’t leave here yet. There’s more. I guess everyone has a Tomcat in the server or something in the 8080 port, so you must to go to the Jenkins conf file which is in “/etc/default/jenkins” and go to line 63, in that line you can configure the port, so change it. I usually use weird ports like 6669, or something like that. After that, you need to restart the service, so run the next command:\n/etc/init.d/jenkins restart When you’ve got it, open a browser and go to the Jenkins. You’ll have something like that:\nAfterthat, go to that file and paste in that input, we’re going to customize the Jenkins. Oops… almost forgot. The password is here: “/var/lib/jenkins/secrets/initialAdminPassword”. After that, we must choose between two options:\nI usually select the suggested option, but this time I’m going to try the other one. After clicking on it, you’re going to have the next window:\nYou can select all of them if you want or just read them all and select the ones you want. I installed the suggested ones, and I added some other ones, such as JUnit, Warnings, ssh plugins and all of the plugins from Git. One more thing, you can check all the dependencies for each plugin if you click on the number with the row. You can see this on the previous screenshot in the first plugin. When you’ve finished selecting all the plugins which you want to install, click on install and wait. You are going to have an installation screen, as you can see in the next screenshot:\nAfter that, you can add a user or just continue as admin. I recommend adding an Admin user.\nAfter that, you have to decide the Jenkins URL that you want. You’re going to wonder why I need this. As this is a test server, I’m going to leave it like that, but in my own jenkins the URL is something like that https://myBarMan.jorgeancal.com:6669. After choosing the URL, you’re done with the installation, so enjoy your Jenkins!\n",
    "ref": "/blog/how-to-install-jenkins/"
  },{
    "title": "About",
    "date": "",
    "description": "Just something about the Website.",
    "body": "Hi,\nI am Jorge Andreu Calatayud and this is my notebook.\nThis is my new project.\nIn this blog, I’ll post about my knowledge and some things that I discover while I\u0026rsquo;m working. I won’t post everyday because that’s impossible. I\u0026rsquo;ll try to post once per week or at least once per month. If you like my posts, stay tuned because I\u0026rsquo;m starting a Youtube channel. Guess what it\u0026rsquo;s going to be called?\u0026hellip;Jorge\u0026rsquo;s NoteBook!.\nSee you soon.\n",
    "ref": "/about/"
  }]
